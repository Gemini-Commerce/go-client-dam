/*
Dam Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DamAssetOrigin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DamAssetOrigin{}

// DamAssetOrigin struct for DamAssetOrigin
type DamAssetOrigin struct {
	Url *string `json:"url,omitempty"`
	Type *AssetOriginTypes `json:"type,omitempty"`
}

// NewDamAssetOrigin instantiates a new DamAssetOrigin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDamAssetOrigin() *DamAssetOrigin {
	this := DamAssetOrigin{}
	var type_ AssetOriginTypes = ASSETORIGINTYPES_EXTERNAL
	this.Type = &type_
	return &this
}

// NewDamAssetOriginWithDefaults instantiates a new DamAssetOrigin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDamAssetOriginWithDefaults() *DamAssetOrigin {
	this := DamAssetOrigin{}
	var type_ AssetOriginTypes = ASSETORIGINTYPES_EXTERNAL
	this.Type = &type_
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *DamAssetOrigin) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DamAssetOrigin) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *DamAssetOrigin) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *DamAssetOrigin) SetUrl(v string) {
	o.Url = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DamAssetOrigin) GetType() AssetOriginTypes {
	if o == nil || IsNil(o.Type) {
		var ret AssetOriginTypes
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DamAssetOrigin) GetTypeOk() (*AssetOriginTypes, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DamAssetOrigin) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given AssetOriginTypes and assigns it to the Type field.
func (o *DamAssetOrigin) SetType(v AssetOriginTypes) {
	o.Type = &v
}

func (o DamAssetOrigin) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DamAssetOrigin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableDamAssetOrigin struct {
	value *DamAssetOrigin
	isSet bool
}

func (v NullableDamAssetOrigin) Get() *DamAssetOrigin {
	return v.value
}

func (v *NullableDamAssetOrigin) Set(val *DamAssetOrigin) {
	v.value = val
	v.isSet = true
}

func (v NullableDamAssetOrigin) IsSet() bool {
	return v.isSet
}

func (v *NullableDamAssetOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDamAssetOrigin(val *DamAssetOrigin) *NullableDamAssetOrigin {
	return &NullableDamAssetOrigin{value: val, isSet: true}
}

func (v NullableDamAssetOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDamAssetOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


