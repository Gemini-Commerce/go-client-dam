/*
Dam Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dam

import (
	"encoding/json"
	"fmt"
)

// checks if the DamListAssetsByIdsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DamListAssetsByIdsRequest{}

// DamListAssetsByIdsRequest struct for DamListAssetsByIdsRequest
type DamListAssetsByIdsRequest struct {
	TenantId             string   `json:"tenantId"`
	Ids                  []string `json:"ids"`
	AdditionalProperties map[string]interface{}
}

type _DamListAssetsByIdsRequest DamListAssetsByIdsRequest

// NewDamListAssetsByIdsRequest instantiates a new DamListAssetsByIdsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDamListAssetsByIdsRequest(tenantId string, ids []string) *DamListAssetsByIdsRequest {
	this := DamListAssetsByIdsRequest{}
	this.TenantId = tenantId
	this.Ids = ids
	return &this
}

// NewDamListAssetsByIdsRequestWithDefaults instantiates a new DamListAssetsByIdsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDamListAssetsByIdsRequestWithDefaults() *DamListAssetsByIdsRequest {
	this := DamListAssetsByIdsRequest{}
	return &this
}

// GetTenantId returns the TenantId field value
func (o *DamListAssetsByIdsRequest) GetTenantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *DamListAssetsByIdsRequest) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *DamListAssetsByIdsRequest) SetTenantId(v string) {
	o.TenantId = v
}

// GetIds returns the Ids field value
func (o *DamListAssetsByIdsRequest) GetIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value
// and a boolean to check if the value has been set.
func (o *DamListAssetsByIdsRequest) GetIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ids, true
}

// SetIds sets field value
func (o *DamListAssetsByIdsRequest) SetIds(v []string) {
	o.Ids = v
}

func (o DamListAssetsByIdsRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DamListAssetsByIdsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tenantId"] = o.TenantId
	toSerialize["ids"] = o.Ids

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DamListAssetsByIdsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tenantId",
		"ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDamListAssetsByIdsRequest := _DamListAssetsByIdsRequest{}

	err = json.Unmarshal(data, &varDamListAssetsByIdsRequest)

	if err != nil {
		return err
	}

	*o = DamListAssetsByIdsRequest(varDamListAssetsByIdsRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *DamListAssetsByIdsRequest) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *DamListAssetsByIdsRequest) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableDamListAssetsByIdsRequest struct {
	value *DamListAssetsByIdsRequest
	isSet bool
}

func (v NullableDamListAssetsByIdsRequest) Get() *DamListAssetsByIdsRequest {
	return v.value
}

func (v *NullableDamListAssetsByIdsRequest) Set(val *DamListAssetsByIdsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDamListAssetsByIdsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDamListAssetsByIdsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDamListAssetsByIdsRequest(val *DamListAssetsByIdsRequest) *NullableDamListAssetsByIdsRequest {
	return &NullableDamListAssetsByIdsRequest{value: val, isSet: true}
}

func (v NullableDamListAssetsByIdsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDamListAssetsByIdsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
