/*
Dam Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dam

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BatchUploadAssetsRequestFiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchUploadAssetsRequestFiles{}

// BatchUploadAssetsRequestFiles struct for BatchUploadAssetsRequestFiles
type BatchUploadAssetsRequestFiles struct {
	Filename string `json:"filename"`
	Size string `json:"size"`
	MimeType string `json:"mimeType"`
}

type _BatchUploadAssetsRequestFiles BatchUploadAssetsRequestFiles

// NewBatchUploadAssetsRequestFiles instantiates a new BatchUploadAssetsRequestFiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchUploadAssetsRequestFiles(filename string, size string, mimeType string) *BatchUploadAssetsRequestFiles {
	this := BatchUploadAssetsRequestFiles{}
	this.Filename = filename
	this.Size = size
	this.MimeType = mimeType
	return &this
}

// NewBatchUploadAssetsRequestFilesWithDefaults instantiates a new BatchUploadAssetsRequestFiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchUploadAssetsRequestFilesWithDefaults() *BatchUploadAssetsRequestFiles {
	this := BatchUploadAssetsRequestFiles{}
	return &this
}

// GetFilename returns the Filename field value
func (o *BatchUploadAssetsRequestFiles) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *BatchUploadAssetsRequestFiles) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *BatchUploadAssetsRequestFiles) SetFilename(v string) {
	o.Filename = v
}

// GetSize returns the Size field value
func (o *BatchUploadAssetsRequestFiles) GetSize() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *BatchUploadAssetsRequestFiles) GetSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *BatchUploadAssetsRequestFiles) SetSize(v string) {
	o.Size = v
}

// GetMimeType returns the MimeType field value
func (o *BatchUploadAssetsRequestFiles) GetMimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *BatchUploadAssetsRequestFiles) GetMimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *BatchUploadAssetsRequestFiles) SetMimeType(v string) {
	o.MimeType = v
}

func (o BatchUploadAssetsRequestFiles) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchUploadAssetsRequestFiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filename"] = o.Filename
	toSerialize["size"] = o.Size
	toSerialize["mimeType"] = o.MimeType
	return toSerialize, nil
}

func (o *BatchUploadAssetsRequestFiles) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filename",
		"size",
		"mimeType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBatchUploadAssetsRequestFiles := _BatchUploadAssetsRequestFiles{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBatchUploadAssetsRequestFiles)

	if err != nil {
		return err
	}

	*o = BatchUploadAssetsRequestFiles(varBatchUploadAssetsRequestFiles)

	return err
}

type NullableBatchUploadAssetsRequestFiles struct {
	value *BatchUploadAssetsRequestFiles
	isSet bool
}

func (v NullableBatchUploadAssetsRequestFiles) Get() *BatchUploadAssetsRequestFiles {
	return v.value
}

func (v *NullableBatchUploadAssetsRequestFiles) Set(val *BatchUploadAssetsRequestFiles) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchUploadAssetsRequestFiles) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchUploadAssetsRequestFiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchUploadAssetsRequestFiles(val *BatchUploadAssetsRequestFiles) *NullableBatchUploadAssetsRequestFiles {
	return &NullableBatchUploadAssetsRequestFiles{value: val, isSet: true}
}

func (v NullableBatchUploadAssetsRequestFiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchUploadAssetsRequestFiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


