/*
Dam Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DamAssetType the model 'DamAssetType'
type DamAssetType string

// List of damAssetType
const (
	DAMASSETTYPE_UNKNOWN DamAssetType = "UNKNOWN"
	DAMASSETTYPE_IMAGE DamAssetType = "IMAGE"
	DAMASSETTYPE_VIDEO DamAssetType = "VIDEO"
	DAMASSETTYPE_VIDEO_EXTERNAL DamAssetType = "VIDEO_EXTERNAL"
	DAMASSETTYPE_APPLICATION DamAssetType = "APPLICATION"
)

// All allowed values of DamAssetType enum
var AllowedDamAssetTypeEnumValues = []DamAssetType{
	"UNKNOWN",
	"IMAGE",
	"VIDEO",
	"VIDEO_EXTERNAL",
	"APPLICATION",
}

func (v *DamAssetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DamAssetType(value)
	for _, existing := range AllowedDamAssetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DamAssetType", value)
}

// NewDamAssetTypeFromValue returns a pointer to a valid DamAssetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDamAssetTypeFromValue(v string) (*DamAssetType, error) {
	ev := DamAssetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DamAssetType: valid values are %v", v, AllowedDamAssetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DamAssetType) IsValid() bool {
	for _, existing := range AllowedDamAssetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to damAssetType value
func (v DamAssetType) Ptr() *DamAssetType {
	return &v
}

type NullableDamAssetType struct {
	value *DamAssetType
	isSet bool
}

func (v NullableDamAssetType) Get() *DamAssetType {
	return v.value
}

func (v *NullableDamAssetType) Set(val *DamAssetType) {
	v.value = val
	v.isSet = true
}

func (v NullableDamAssetType) IsSet() bool {
	return v.isSet
}

func (v *NullableDamAssetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDamAssetType(val *DamAssetType) *NullableDamAssetType {
	return &NullableDamAssetType{value: val, isSet: true}
}

func (v NullableDamAssetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDamAssetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

