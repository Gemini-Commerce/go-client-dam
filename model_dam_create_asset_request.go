/*
Dam Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dam

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DamCreateAssetRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DamCreateAssetRequest{}

// DamCreateAssetRequest struct for DamCreateAssetRequest
type DamCreateAssetRequest struct {
	TenantId string `json:"tenantId"`
	Type DamAssetType `json:"type"`
	Code string `json:"code"`
	Metadata []AssetMetadata `json:"metadata,omitempty"`
	Origin DamAssetOrigin `json:"origin"`
}

type _DamCreateAssetRequest DamCreateAssetRequest

// NewDamCreateAssetRequest instantiates a new DamCreateAssetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDamCreateAssetRequest(tenantId string, type_ DamAssetType, code string, origin DamAssetOrigin) *DamCreateAssetRequest {
	this := DamCreateAssetRequest{}
	this.TenantId = tenantId
	this.Type = type_
	this.Code = code
	this.Origin = origin
	return &this
}

// NewDamCreateAssetRequestWithDefaults instantiates a new DamCreateAssetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDamCreateAssetRequestWithDefaults() *DamCreateAssetRequest {
	this := DamCreateAssetRequest{}
	var type_ DamAssetType = UNKNOWN
	this.Type = type_
	return &this
}

// GetTenantId returns the TenantId field value
func (o *DamCreateAssetRequest) GetTenantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *DamCreateAssetRequest) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *DamCreateAssetRequest) SetTenantId(v string) {
	o.TenantId = v
}

// GetType returns the Type field value
func (o *DamCreateAssetRequest) GetType() DamAssetType {
	if o == nil {
		var ret DamAssetType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DamCreateAssetRequest) GetTypeOk() (*DamAssetType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DamCreateAssetRequest) SetType(v DamAssetType) {
	o.Type = v
}

// GetCode returns the Code field value
func (o *DamCreateAssetRequest) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *DamCreateAssetRequest) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *DamCreateAssetRequest) SetCode(v string) {
	o.Code = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *DamCreateAssetRequest) GetMetadata() []AssetMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret []AssetMetadata
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DamCreateAssetRequest) GetMetadataOk() ([]AssetMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *DamCreateAssetRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given []AssetMetadata and assigns it to the Metadata field.
func (o *DamCreateAssetRequest) SetMetadata(v []AssetMetadata) {
	o.Metadata = v
}

// GetOrigin returns the Origin field value
func (o *DamCreateAssetRequest) GetOrigin() DamAssetOrigin {
	if o == nil {
		var ret DamAssetOrigin
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *DamCreateAssetRequest) GetOriginOk() (*DamAssetOrigin, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *DamCreateAssetRequest) SetOrigin(v DamAssetOrigin) {
	o.Origin = v
}

func (o DamCreateAssetRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DamCreateAssetRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tenantId"] = o.TenantId
	toSerialize["type"] = o.Type
	toSerialize["code"] = o.Code
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["origin"] = o.Origin
	return toSerialize, nil
}

func (o *DamCreateAssetRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tenantId",
		"type",
		"code",
		"origin",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDamCreateAssetRequest := _DamCreateAssetRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDamCreateAssetRequest)

	if err != nil {
		return err
	}

	*o = DamCreateAssetRequest(varDamCreateAssetRequest)

	return err
}

type NullableDamCreateAssetRequest struct {
	value *DamCreateAssetRequest
	isSet bool
}

func (v NullableDamCreateAssetRequest) Get() *DamCreateAssetRequest {
	return v.value
}

func (v *NullableDamCreateAssetRequest) Set(val *DamCreateAssetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDamCreateAssetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDamCreateAssetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDamCreateAssetRequest(val *DamCreateAssetRequest) *NullableDamCreateAssetRequest {
	return &NullableDamCreateAssetRequest{value: val, isSet: true}
}

func (v NullableDamCreateAssetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDamCreateAssetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


