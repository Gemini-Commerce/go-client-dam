/*
Dam Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dam

import (
	"encoding/json"
	"fmt"
)

// checks if the DamListAssetsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DamListAssetsRequest{}

// DamListAssetsRequest struct for DamListAssetsRequest
type DamListAssetsRequest struct {
	TenantId string `json:"tenantId"`
	// The maximum number of assets to return. The service may return fewer than this value. If unspecified, at most 10 assets will be returned. The maximum value is 100; values above 100 will be coerced to 100.
	PageSize *int64 `json:"pageSize,omitempty"`
	// A page token, received from a previous `ListAssets` call. Provide this to retrieve the subsequent page.   When paginating, all other parameters provided to `ListAssets` must match the call that provided the page token.
	PageToken *string `json:"pageToken,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DamListAssetsRequest DamListAssetsRequest

// NewDamListAssetsRequest instantiates a new DamListAssetsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDamListAssetsRequest(tenantId string) *DamListAssetsRequest {
	this := DamListAssetsRequest{}
	this.TenantId = tenantId
	return &this
}

// NewDamListAssetsRequestWithDefaults instantiates a new DamListAssetsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDamListAssetsRequestWithDefaults() *DamListAssetsRequest {
	this := DamListAssetsRequest{}
	return &this
}

// GetTenantId returns the TenantId field value
func (o *DamListAssetsRequest) GetTenantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *DamListAssetsRequest) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *DamListAssetsRequest) SetTenantId(v string) {
	o.TenantId = v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *DamListAssetsRequest) GetPageSize() int64 {
	if o == nil || IsNil(o.PageSize) {
		var ret int64
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DamListAssetsRequest) GetPageSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *DamListAssetsRequest) HasPageSize() bool {
	if o != nil && !IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int64 and assigns it to the PageSize field.
func (o *DamListAssetsRequest) SetPageSize(v int64) {
	o.PageSize = &v
}

// GetPageToken returns the PageToken field value if set, zero value otherwise.
func (o *DamListAssetsRequest) GetPageToken() string {
	if o == nil || IsNil(o.PageToken) {
		var ret string
		return ret
	}
	return *o.PageToken
}

// GetPageTokenOk returns a tuple with the PageToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DamListAssetsRequest) GetPageTokenOk() (*string, bool) {
	if o == nil || IsNil(o.PageToken) {
		return nil, false
	}
	return o.PageToken, true
}

// HasPageToken returns a boolean if a field has been set.
func (o *DamListAssetsRequest) HasPageToken() bool {
	if o != nil && !IsNil(o.PageToken) {
		return true
	}

	return false
}

// SetPageToken gets a reference to the given string and assigns it to the PageToken field.
func (o *DamListAssetsRequest) SetPageToken(v string) {
	o.PageToken = &v
}

func (o DamListAssetsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DamListAssetsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tenantId"] = o.TenantId
	if !IsNil(o.PageSize) {
		toSerialize["pageSize"] = o.PageSize
	}
	if !IsNil(o.PageToken) {
		toSerialize["pageToken"] = o.PageToken
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DamListAssetsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tenantId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDamListAssetsRequest := _DamListAssetsRequest{}

	err = json.Unmarshal(data, &varDamListAssetsRequest)

	if err != nil {
		return err
	}

	*o = DamListAssetsRequest(varDamListAssetsRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "pageSize")
		delete(additionalProperties, "pageToken")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *DamListAssetsRequest) GetValue() interface{} {
	if o == nil || IsNil(o.Type) || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}
// SetValue populate the value of well-known types
func (o *DamListAssetsRequest) SetValue(value interface{}) {
	if o == nil || IsNil(o.Type) || IsNil(value) {
		return
	}
    if IsNil(o.AdditionalProperties) {
        o.AdditionalProperties = map[string]interface{}{}
    }
	o.AdditionalProperties["value"] = value
	return
}
type NullableDamListAssetsRequest struct {
	value *DamListAssetsRequest
	isSet bool
}

func (v NullableDamListAssetsRequest) Get() *DamListAssetsRequest {
	return v.value
}

func (v *NullableDamListAssetsRequest) Set(val *DamListAssetsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDamListAssetsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDamListAssetsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDamListAssetsRequest(val *DamListAssetsRequest) *NullableDamListAssetsRequest {
	return &NullableDamListAssetsRequest{value: val, isSet: true}
}

func (v NullableDamListAssetsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDamListAssetsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


